//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""e74a5cee-0909-4dea-8e24-9d52e0a8c71e"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c6fc2e6c-d0f1-4ecd-aa7d-e8a6991b9059"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""b957e40a-7fb9-465c-9272-ece4c3b2f83d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Vertical"",
                    ""type"": ""Value"",
                    ""id"": ""f7d310d4-c440-4846-bd5e-dea823e17004"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""f979ec7f-5984-4e80-bb65-67648920c714"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""84ba66cc-778c-4c88-b73e-2e304d8d3867"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98ef2191-6814-407e-aac8-4c5fcdf1a82f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""A-D"",
                    ""id"": ""61121497-86df-4784-a1da-4c53e7071826"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""56d765c5-8d80-4be7-9c0e-3ae09b141d14"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""06d46242-681f-4464-bdec-6e517e9684ec"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ac5e86ee-4e57-4c72-95f8-370ee8d33543"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Gameplad Arrows"",
                    ""id"": ""cfafcd82-a1d8-4881-a12d-70d6b744d4a0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""15f10aff-b840-4766-9245-da9ca3db430d"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""14a60ba9-ba72-4f09-88ca-3c4c05923513"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""W-S"",
                    ""id"": ""0ae7b81b-4298-4141-aa4b-1e3cb338965c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b55a660a-0deb-40a4-b385-11ff3c7b0aea"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f898dbbd-87a2-496a-a3c5-88ce9390008d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""48720f29-3e64-411c-bfd0-b01db236d65d"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Gamepad Arrows"",
                    ""id"": ""e0964f77-7f01-47bf-9e33-fe630857e746"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""249452b7-1fec-4c6f-9ee2-f5b750cbeb88"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""beff4c7a-34ad-4c97-8bbf-69581f1e86a1"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""24051d6c-13a2-4725-96f2-86367cc67eeb"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20e50cab-a7ae-47e5-abda-b4f13bc7adca"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Aiming"",
            ""id"": ""4d745d5b-f262-44aa-9620-81681a93704b"",
            ""actions"": [
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""9a340ee2-96ac-47c4-9460-781e3f6f46de"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""e8647dd6-c677-41ca-a2cf-8ab9ff7a4820"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""9113955d-f0d4-467c-9b41-18040b71899c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8601df5f-2f8a-4907-b534-289ece076693"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8fefe485-bee5-41f5-bcca-6a770d2d2f05"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccbabfba-4ff9-4c54-a288-b022c7392907"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7052ea2b-b718-41f8-8c85-5a3c4b548ede"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa714908-db7b-482f-a17d-d67be49e7cb9"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menues"",
            ""id"": ""a66196bf-77b4-46a0-8e6b-507dea0f2982"",
            ""actions"": [
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""fd111cb9-c6a5-447c-8ac4-7ec62bece30c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""41fd53f9-e8d6-439a-be41-43eeb9e5e865"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""246e278a-15b2-4bdc-a090-6f8ad101b640"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cfc30de6-2085-4ae2-9143-50a4d3332091"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0511162f-f410-4b9e-9f5f-14b144561901"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72ee86a3-ec5b-4cc2-b2c0-0aa8e54d9e92"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""896a262b-0507-4f5c-aef5-8358e429a6d5"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9988b42e-a50d-46cd-85c0-bd3a74faeb04"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e523b684-6477-4a4e-9af4-d628e75d0427"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""5ae75333-265b-4a62-882b-4ac7d6cfd59f"",
            ""actions"": [
                {
                    ""name"": ""1"",
                    ""type"": ""Button"",
                    ""id"": ""ec2f3b75-a559-480c-a206-5e0b4638d008"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""2"",
                    ""type"": ""Button"",
                    ""id"": ""a8e7aa90-8f98-4cc8-8686-a34ce8c5b495"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""3"",
                    ""type"": ""Button"",
                    ""id"": ""fd542c8e-62cf-4510-82ce-840c8ab49bc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""4"",
                    ""type"": ""Button"",
                    ""id"": ""a9b441e2-f983-47d4-8370-cd22ce685a92"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""5"",
                    ""type"": ""Button"",
                    ""id"": ""f37f7296-b4e2-4e47-ac9c-5980b9a2d775"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""6"",
                    ""type"": ""Button"",
                    ""id"": ""dea5f847-293e-4706-95d8-770f2dac5b56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""7"",
                    ""type"": ""Button"",
                    ""id"": ""22c24f5b-8cf2-4619-87c8-a611f275da78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""8"",
                    ""type"": ""Button"",
                    ""id"": ""c289741a-8a76-4da5-9bcd-e868ec7074fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""9"",
                    ""type"": ""Button"",
                    ""id"": ""f4519e6e-27ca-4829-8026-973fb64389a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""0"",
                    ""type"": ""Button"",
                    ""id"": ""379b3e93-34b0-412d-9b66-086967b36ce5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b57df891-4e63-4584-98f5-08058757c727"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7f0c6c9-4678-4a78-8ab0-383019664870"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bf8824c-bee9-451d-a207-6f85df66e41e"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56baf2ab-04ee-4abd-8189-f96014fccad0"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b710139-6d30-48fe-ac2a-4397362a5bc7"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7acb42e-75bb-4d31-a9ec-4c40ee5d311e"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e2a28e7-2f05-4758-a45f-f9b2a74c1417"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fdf165e8-762c-49b9-92fe-cbbca7ded436"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce80c25e-b365-4079-b293-629cf56ffdcc"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""9"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b314b353-c32a-45cd-84ff-1fc5a011113c"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        m_Movement_Horizontal = m_Movement.FindAction("Horizontal", throwIfNotFound: true);
        m_Movement_Vertical = m_Movement.FindAction("Vertical", throwIfNotFound: true);
        m_Movement_Run = m_Movement.FindAction("Run", throwIfNotFound: true);
        // Aiming
        m_Aiming = asset.FindActionMap("Aiming", throwIfNotFound: true);
        m_Aiming_MousePos = m_Aiming.FindAction("MousePos", throwIfNotFound: true);
        m_Aiming_LeftClick = m_Aiming.FindAction("LeftClick", throwIfNotFound: true);
        m_Aiming_RightClick = m_Aiming.FindAction("RightClick", throwIfNotFound: true);
        // Menues
        m_Menues = asset.FindActionMap("Menues", throwIfNotFound: true);
        m_Menues_Scroll = m_Menues.FindAction("Scroll", throwIfNotFound: true);
        m_Menues_Pause = m_Menues.FindAction("Pause", throwIfNotFound: true);
        m_Menues_Select = m_Menues.FindAction("Select", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory__1 = m_Inventory.FindAction("1", throwIfNotFound: true);
        m_Inventory__2 = m_Inventory.FindAction("2", throwIfNotFound: true);
        m_Inventory__3 = m_Inventory.FindAction("3", throwIfNotFound: true);
        m_Inventory__4 = m_Inventory.FindAction("4", throwIfNotFound: true);
        m_Inventory__5 = m_Inventory.FindAction("5", throwIfNotFound: true);
        m_Inventory__6 = m_Inventory.FindAction("6", throwIfNotFound: true);
        m_Inventory__7 = m_Inventory.FindAction("7", throwIfNotFound: true);
        m_Inventory__8 = m_Inventory.FindAction("8", throwIfNotFound: true);
        m_Inventory__9 = m_Inventory.FindAction("9", throwIfNotFound: true);
        m_Inventory__0 = m_Inventory.FindAction("0", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Jump;
    private readonly InputAction m_Movement_Horizontal;
    private readonly InputAction m_Movement_Vertical;
    private readonly InputAction m_Movement_Run;
    public struct MovementActions
    {
        private @PlayerInputs m_Wrapper;
        public MovementActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputAction @Horizontal => m_Wrapper.m_Movement_Horizontal;
        public InputAction @Vertical => m_Wrapper.m_Movement_Vertical;
        public InputAction @Run => m_Wrapper.m_Movement_Run;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnJump;
                @Horizontal.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnHorizontal;
                @Horizontal.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnHorizontal;
                @Horizontal.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnHorizontal;
                @Vertical.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnVertical;
                @Vertical.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnVertical;
                @Vertical.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnVertical;
                @Run.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRun;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Horizontal.started += instance.OnHorizontal;
                @Horizontal.performed += instance.OnHorizontal;
                @Horizontal.canceled += instance.OnHorizontal;
                @Vertical.started += instance.OnVertical;
                @Vertical.performed += instance.OnVertical;
                @Vertical.canceled += instance.OnVertical;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Aiming
    private readonly InputActionMap m_Aiming;
    private IAimingActions m_AimingActionsCallbackInterface;
    private readonly InputAction m_Aiming_MousePos;
    private readonly InputAction m_Aiming_LeftClick;
    private readonly InputAction m_Aiming_RightClick;
    public struct AimingActions
    {
        private @PlayerInputs m_Wrapper;
        public AimingActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePos => m_Wrapper.m_Aiming_MousePos;
        public InputAction @LeftClick => m_Wrapper.m_Aiming_LeftClick;
        public InputAction @RightClick => m_Wrapper.m_Aiming_RightClick;
        public InputActionMap Get() { return m_Wrapper.m_Aiming; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AimingActions set) { return set.Get(); }
        public void SetCallbacks(IAimingActions instance)
        {
            if (m_Wrapper.m_AimingActionsCallbackInterface != null)
            {
                @MousePos.started -= m_Wrapper.m_AimingActionsCallbackInterface.OnMousePos;
                @MousePos.performed -= m_Wrapper.m_AimingActionsCallbackInterface.OnMousePos;
                @MousePos.canceled -= m_Wrapper.m_AimingActionsCallbackInterface.OnMousePos;
                @LeftClick.started -= m_Wrapper.m_AimingActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_AimingActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_AimingActionsCallbackInterface.OnLeftClick;
                @RightClick.started -= m_Wrapper.m_AimingActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_AimingActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_AimingActionsCallbackInterface.OnRightClick;
            }
            m_Wrapper.m_AimingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePos.started += instance.OnMousePos;
                @MousePos.performed += instance.OnMousePos;
                @MousePos.canceled += instance.OnMousePos;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
            }
        }
    }
    public AimingActions @Aiming => new AimingActions(this);

    // Menues
    private readonly InputActionMap m_Menues;
    private IMenuesActions m_MenuesActionsCallbackInterface;
    private readonly InputAction m_Menues_Scroll;
    private readonly InputAction m_Menues_Pause;
    private readonly InputAction m_Menues_Select;
    public struct MenuesActions
    {
        private @PlayerInputs m_Wrapper;
        public MenuesActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Scroll => m_Wrapper.m_Menues_Scroll;
        public InputAction @Pause => m_Wrapper.m_Menues_Pause;
        public InputAction @Select => m_Wrapper.m_Menues_Select;
        public InputActionMap Get() { return m_Wrapper.m_Menues; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuesActions set) { return set.Get(); }
        public void SetCallbacks(IMenuesActions instance)
        {
            if (m_Wrapper.m_MenuesActionsCallbackInterface != null)
            {
                @Scroll.started -= m_Wrapper.m_MenuesActionsCallbackInterface.OnScroll;
                @Scroll.performed -= m_Wrapper.m_MenuesActionsCallbackInterface.OnScroll;
                @Scroll.canceled -= m_Wrapper.m_MenuesActionsCallbackInterface.OnScroll;
                @Pause.started -= m_Wrapper.m_MenuesActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_MenuesActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_MenuesActionsCallbackInterface.OnPause;
                @Select.started -= m_Wrapper.m_MenuesActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_MenuesActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_MenuesActionsCallbackInterface.OnSelect;
            }
            m_Wrapper.m_MenuesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Scroll.started += instance.OnScroll;
                @Scroll.performed += instance.OnScroll;
                @Scroll.canceled += instance.OnScroll;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
            }
        }
    }
    public MenuesActions @Menues => new MenuesActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private IInventoryActions m_InventoryActionsCallbackInterface;
    private readonly InputAction m_Inventory__1;
    private readonly InputAction m_Inventory__2;
    private readonly InputAction m_Inventory__3;
    private readonly InputAction m_Inventory__4;
    private readonly InputAction m_Inventory__5;
    private readonly InputAction m_Inventory__6;
    private readonly InputAction m_Inventory__7;
    private readonly InputAction m_Inventory__8;
    private readonly InputAction m_Inventory__9;
    private readonly InputAction m_Inventory__0;
    public struct InventoryActions
    {
        private @PlayerInputs m_Wrapper;
        public InventoryActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @_1 => m_Wrapper.m_Inventory__1;
        public InputAction @_2 => m_Wrapper.m_Inventory__2;
        public InputAction @_3 => m_Wrapper.m_Inventory__3;
        public InputAction @_4 => m_Wrapper.m_Inventory__4;
        public InputAction @_5 => m_Wrapper.m_Inventory__5;
        public InputAction @_6 => m_Wrapper.m_Inventory__6;
        public InputAction @_7 => m_Wrapper.m_Inventory__7;
        public InputAction @_8 => m_Wrapper.m_Inventory__8;
        public InputAction @_9 => m_Wrapper.m_Inventory__9;
        public InputAction @_0 => m_Wrapper.m_Inventory__0;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void SetCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterface != null)
            {
                @_1.started -= m_Wrapper.m_InventoryActionsCallbackInterface.On_1;
                @_1.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.On_1;
                @_1.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.On_1;
                @_2.started -= m_Wrapper.m_InventoryActionsCallbackInterface.On_2;
                @_2.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.On_2;
                @_2.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.On_2;
                @_3.started -= m_Wrapper.m_InventoryActionsCallbackInterface.On_3;
                @_3.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.On_3;
                @_3.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.On_3;
                @_4.started -= m_Wrapper.m_InventoryActionsCallbackInterface.On_4;
                @_4.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.On_4;
                @_4.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.On_4;
                @_5.started -= m_Wrapper.m_InventoryActionsCallbackInterface.On_5;
                @_5.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.On_5;
                @_5.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.On_5;
                @_6.started -= m_Wrapper.m_InventoryActionsCallbackInterface.On_6;
                @_6.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.On_6;
                @_6.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.On_6;
                @_7.started -= m_Wrapper.m_InventoryActionsCallbackInterface.On_7;
                @_7.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.On_7;
                @_7.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.On_7;
                @_8.started -= m_Wrapper.m_InventoryActionsCallbackInterface.On_8;
                @_8.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.On_8;
                @_8.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.On_8;
                @_9.started -= m_Wrapper.m_InventoryActionsCallbackInterface.On_9;
                @_9.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.On_9;
                @_9.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.On_9;
                @_0.started -= m_Wrapper.m_InventoryActionsCallbackInterface.On_0;
                @_0.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.On_0;
                @_0.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.On_0;
            }
            m_Wrapper.m_InventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @_1.started += instance.On_1;
                @_1.performed += instance.On_1;
                @_1.canceled += instance.On_1;
                @_2.started += instance.On_2;
                @_2.performed += instance.On_2;
                @_2.canceled += instance.On_2;
                @_3.started += instance.On_3;
                @_3.performed += instance.On_3;
                @_3.canceled += instance.On_3;
                @_4.started += instance.On_4;
                @_4.performed += instance.On_4;
                @_4.canceled += instance.On_4;
                @_5.started += instance.On_5;
                @_5.performed += instance.On_5;
                @_5.canceled += instance.On_5;
                @_6.started += instance.On_6;
                @_6.performed += instance.On_6;
                @_6.canceled += instance.On_6;
                @_7.started += instance.On_7;
                @_7.performed += instance.On_7;
                @_7.canceled += instance.On_7;
                @_8.started += instance.On_8;
                @_8.performed += instance.On_8;
                @_8.canceled += instance.On_8;
                @_9.started += instance.On_9;
                @_9.performed += instance.On_9;
                @_9.canceled += instance.On_9;
                @_0.started += instance.On_0;
                @_0.performed += instance.On_0;
                @_0.canceled += instance.On_0;
            }
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnHorizontal(InputAction.CallbackContext context);
        void OnVertical(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
    public interface IAimingActions
    {
        void OnMousePos(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
    }
    public interface IMenuesActions
    {
        void OnScroll(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void On_1(InputAction.CallbackContext context);
        void On_2(InputAction.CallbackContext context);
        void On_3(InputAction.CallbackContext context);
        void On_4(InputAction.CallbackContext context);
        void On_5(InputAction.CallbackContext context);
        void On_6(InputAction.CallbackContext context);
        void On_7(InputAction.CallbackContext context);
        void On_8(InputAction.CallbackContext context);
        void On_9(InputAction.CallbackContext context);
        void On_0(InputAction.CallbackContext context);
    }
}
